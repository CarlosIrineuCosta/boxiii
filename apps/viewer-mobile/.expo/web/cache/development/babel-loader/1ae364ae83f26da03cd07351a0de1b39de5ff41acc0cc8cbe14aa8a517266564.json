{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { styles } from \"../styles/styles\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Card = function Card(_ref) {\n  var question = _ref.question,\n    answer = _ref.answer;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFlipped = _useState2[0],\n    setIsFlipped = _useState2[1];\n  var flipAnimation = useRef(new Animated.Value(0)).current;\n  var flipCard = function flipCard() {\n    var toValue = isFlipped ? 0 : 1;\n    Animated.spring(flipAnimation, {\n      toValue: toValue,\n      friction: 8,\n      tension: 10,\n      useNativeDriver: true\n    }).start();\n    setIsFlipped(!isFlipped);\n  };\n  var frontInterpolate = flipAnimation.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg']\n  });\n  var backInterpolate = flipAnimation.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['180deg', '360deg']\n  });\n  var frontOpacity = flipAnimation.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [1, 0, 0]\n  });\n  var backOpacity = flipAnimation.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [0, 0, 1]\n  });\n  return _jsxs(TouchableOpacity, {\n    onPress: flipCard,\n    style: styles.cardContainer,\n    activeOpacity: 0.8,\n    children: [_jsxs(Animated.View, {\n      style: [styles.card, styles.cardFront, {\n        transform: [{\n          rotateY: frontInterpolate\n        }],\n        opacity: frontOpacity\n      }],\n      children: [_jsx(Text, {\n        style: styles.cardText,\n        children: question\n      }), _jsx(Text, {\n        style: styles.tapHint,\n        children: \"Tap to reveal\"\n      })]\n    }), _jsxs(Animated.View, {\n      style: [styles.card, styles.cardBack, {\n        transform: [{\n          rotateY: backInterpolate\n        }],\n        opacity: backOpacity\n      }],\n      children: [_jsx(Text, {\n        style: styles.cardText,\n        children: answer\n      }), _jsx(Text, {\n        style: styles.tapHint,\n        children: \"Tap to flip back\"\n      })]\n    })]\n  });\n};\nexport default Card;","map":{"version":3,"names":["React","useState","useRef","View","Text","TouchableOpacity","Animated","styles","jsx","_jsx","jsxs","_jsxs","Card","_ref","question","answer","_useState","_useState2","_slicedToArray","isFlipped","setIsFlipped","flipAnimation","Value","current","flipCard","toValue","spring","friction","tension","useNativeDriver","start","frontInterpolate","interpolate","inputRange","outputRange","backInterpolate","frontOpacity","backOpacity","onPress","style","cardContainer","activeOpacity","children","card","cardFront","transform","rotateY","opacity","cardText","tapHint","cardBack"],"sources":["/home/cdc/projects/boxiii/react-native-branch/ZenTriviaApp/src/components/Card.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Animated,\n} from 'react-native';\nimport { styles } from '../styles/styles';\n\nconst Card = ({ question, answer }) => {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const flipAnimation = useRef(new Animated.Value(0)).current;\n\n  const flipCard = () => {\n    const toValue = isFlipped ? 0 : 1;\n    \n    Animated.spring(flipAnimation, {\n      toValue,\n      friction: 8,\n      tension: 10,\n      useNativeDriver: true,\n    }).start();\n    \n    setIsFlipped(!isFlipped);\n  };\n\n  const frontInterpolate = flipAnimation.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const backInterpolate = flipAnimation.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['180deg', '360deg'],\n  });\n\n  const frontOpacity = flipAnimation.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [1, 0, 0],\n  });\n\n  const backOpacity = flipAnimation.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [0, 0, 1],\n  });\n\n  return (\n    <TouchableOpacity onPress={flipCard} style={styles.cardContainer} activeOpacity={0.8}>\n      {/* Front of card */}\n      <Animated.View\n        style={[\n          styles.card,\n          styles.cardFront,\n          {\n            transform: [{ rotateY: frontInterpolate }],\n            opacity: frontOpacity,\n          },\n        ]}\n      >\n        <Text style={styles.cardText}>{question}</Text>\n        <Text style={styles.tapHint}>Tap to reveal</Text>\n      </Animated.View>\n\n      {/* Back of card */}\n      <Animated.View\n        style={[\n          styles.card,\n          styles.cardBack,\n          {\n            transform: [{ rotateY: backInterpolate }],\n            opacity: backOpacity,\n          },\n        ]}\n      >\n        <Text style={styles.cardText}>{answer}</Text>\n        <Text style={styles.tapHint}>Tap to flip back</Text>\n      </Animated.View>\n    </TouchableOpacity>\n  );\n};\n\nexport default Card;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}